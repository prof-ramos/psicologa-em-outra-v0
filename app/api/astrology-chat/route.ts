import { NextRequest, NextResponse } from 'next/server'
import { GoogleGenerativeAI } from '@google/generative-ai'
import type { ChartData } from '@/app/types/astrology'

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || '')

export async function POST(request: NextRequest) {
  try {
    const { message, chartData, conversationHistory } = await request.json()

    if (!process.env.GEMINI_API_KEY) {
      return NextResponse.json({
        response: "üîë Para usar o chatbot astrol√≥gico, configure sua chave da API Gemini no arquivo .env.local:\n\nGEMINI_API_KEY=sua_chave_aqui\n\nObtenha sua chave gratuita em: https://makersuite.google.com/app/apikey"
      })
    }

    // Preparar contexto astrol√≥gico detalhado
    const astrologicalContext = generateAstrologicalContext(chartData)
    
    // Preparar hist√≥rico da conversa
    const conversationContext = conversationHistory
      .filter((msg: any) => !msg.isTyping)
      .map((msg: any) => `${msg.role === 'user' ? 'Usu√°rio' : 'Assistente'}: ${msg.content}`)
      .join('\n\n')

    const model = genAI.getGenerativeModel({ model: 'gemini-pro' })

    const prompt = `Voc√™ √© um assistente astrol√≥gico especializado, amig√°vel e s√°bio. Sua miss√£o √© interpretar mapas astrais e conversar sobre astrologia de forma acess√≠vel e envolvente.

INFORMA√á√ïES DO MAPA ASTRAL DO USU√ÅRIO:
${astrologicalContext}

HIST√ìRICO DA CONVERSA:
${conversationContext}

NOVA PERGUNTA DO USU√ÅRIO: "${message}"

INSTRU√á√ïES PARA SUA RESPOSTA:
1. Seja caloroso, emp√°tico e encorajador
2. Use emojis relevantes para tornar a conversa mais envolvente
3. Baseie suas respostas nas informa√ß√µes espec√≠ficas do mapa astral do usu√°rio
4. Explique conceitos astrol√≥gicos de forma simples e compreens√≠vel
5. Ofere√ßa insights pr√°ticos e aplic√°veis √† vida cotidiana
6. Mantenha um tom otimista e construtivo
7. Se a pergunta n√£o for sobre astrologia, redirecione gentilmente para temas astrol√≥gicos
8. Use no m√°ximo 200 palavras por resposta para manter a conversa fluida
9. Cite posi√ß√µes espec√≠ficas do mapa quando relevante
10. Ofere√ßa conselhos pr√°ticos baseados nas caracter√≠sticas astrol√≥gicas

Responda de forma personalizada e espec√≠fica para este usu√°rio:`;

    const result = await model.generateContent(prompt)
    const response = result.response
    const text = response.text()

    return NextResponse.json({ response: text })

  } catch (error) {
    console.error('Erro no chat astrol√≥gico:', error)
    
    return NextResponse.json({
      response: "üòî Desculpe, tive um problema para processar sua pergunta. Como um bom astr√≥logo, √†s vezes preciso de um momento para consultar as estrelas! Pode tentar novamente?"
    })
  }
}

function generateAstrologicalContext(chartData: ChartData): string {
  if (!chartData) return "Nenhum mapa astral dispon√≠vel."

  let context = `MAPA ASTRAL DE ${chartData.name.toUpperCase()}\n`
  context += `Data de Nascimento: ${chartData.birthDate}\n`
  context += `Hora: ${chartData.birthTime}\n`
  context += `Local: ${chartData.birthPlace}\n\n`

  // Planetas e suas posi√ß√µes
  context += "POSI√á√ïES PLANET√ÅRIAS:\n"
  chartData.planets.forEach(planet => {
    context += `‚Ä¢ ${planet.name}: ${planet.sign} ${Math.floor(planet.degree)}¬∞${Math.floor((planet.degree % 1) * 60)}' (Casa ${planet.house})\n`
  })

  // Casas astrol√≥gicas
  context += "\nCASAS ASTROL√ìGICAS:\n"
  chartData.houses.forEach(house => {
    context += `‚Ä¢ Casa ${house.house}: ${house.sign} ${Math.floor(house.degree)}¬∞${Math.floor((house.degree % 1) * 60)}'\n`
  })

  // Aspectos planet√°rios
  if (chartData.aspects.length > 0) {
    context += "\nASPECTOS PLANET√ÅRIOS:\n"
    chartData.aspects.forEach(aspect => {
      context += `‚Ä¢ ${aspect.planetA} ${getAspectSymbol(aspect.type)} ${aspect.planetB} (orbe: ${aspect.orb.toFixed(1)}¬∞)\n`
    })
  }

  // An√°lise dos elementos e modalidades
  const elementCount = analyzeElements(chartData.planets)
  const modalityCount = analyzeModalities(chartData.planets)
  
  context += "\nDISTRIBUI√á√ÉO POR ELEMENTOS:\n"
  Object.entries(elementCount).forEach(([element, count]) => {
    context += `‚Ä¢ ${element}: ${count} planetas\n`
  })

  context += "\nDISTRIBUI√á√ÉO POR MODALIDADES:\n"
  Object.entries(modalityCount).forEach(([modality, count]) => {
    context += `‚Ä¢ ${modality}: ${count} planetas\n`
  })

  return context
}

function getAspectSymbol(aspectType: string): string {
  const symbols: Record<string, string> = {
    'conjunction': '‚òå',
    'sextile': '‚öπ',
    'square': '‚ñ°',
    'trine': '‚ñ≥',
    'opposition': '‚òç'
  }
  return symbols[aspectType] || aspectType
}

function analyzeElements(planets: any[]): Record<string, number> {
  const elements: Record<string, number> = {
    'Fogo': 0,
    'Terra': 0,
    'Ar': 0,
    '√Ågua': 0
  }

  const signElements: Record<number, string> = {
    0: 'Fogo', 1: 'Terra', 2: 'Ar', 3: '√Ågua',
    4: 'Fogo', 5: 'Terra', 6: 'Ar', 7: '√Ågua',
    8: 'Fogo', 9: 'Terra', 10: 'Ar', 11: '√Ågua'
  }

  planets.forEach(planet => {
    const element = signElements[planet.signIndex]
    if (element) elements[element]++
  })

  return elements
}

function analyzeModalities(planets: any[]): Record<string, number> {
  const modalities: Record<string, number> = {
    'Cardinal': 0,
    'Fixo': 0,
    'Mut√°vel': 0
  }

  const signModalities: Record<number, string> = {
    0: 'Cardinal', 1: 'Fixo', 2: 'Mut√°vel', 3: 'Cardinal',
    4: 'Fixo', 5: 'Mut√°vel', 6: 'Cardinal', 7: 'Fixo',
    8: 'Mut√°vel', 9: 'Cardinal', 10: 'Fixo', 11: 'Mut√°vel'
  }

  planets.forEach(planet => {
    const modality = signModalities[planet.signIndex]
    if (modality) modalities[modality]++
  })

  return modalities
}
